name: Build and Publish

on:
  push:

env:
  pattern_vault_version: "[0-9](.*)[^.jartar]"

jobs:
  gradle_build:
    runs-on: ubuntu-latest
    env:
      # Envs for spring test setup
      SPRING_PROFILES_ACTIVE: production,production-test
      JDBC_HOST: localhost
      JDBC_PORT: 5432
      JDBC_DATABASE: ${{ vars.JDBC_DATABASE }}
      JDBC_USERNAME: ${{ vars.JDBC_USERNAME }}
      JDBC_PASSWORD: ${{ secrets.JDBC_PASSWORD }}
      JDBC_CONNECTION_POOL_MIN: 5
      JDBC_CONNECTION_POOL_MAX: 20
      FILES_OUTPUT_DIR: /tmp/test
      PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Inject initdb.sql to create vault database and user
        run: psql -h localhost -p 5432 -U ${{ vars.POSTGRES_USER }} -d postgres -f docker/docker-compose/data/postgres/initdb.sql

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate resources with OpenApi
        run: ./gradlew openApiGenerate

      - name: Build with Gradle
        run: ./gradlew build

      - uses: actions/upload-artifact@v4
        with:
          name: vault-jar
          path: vault/build/libs/

  docker_build:
    env:
      version_vault: ""
    needs:
      - gradle_build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: vault-jar

      - name: Extract version of jar file
        run: echo version_vault=$(ls vault-* | grep -oE "${{ env.pattern_vault_version }}") >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            BUILD_VERSION=${{ env.version_vault }}
          file: ./docker/Dockerfile
          push: false
          tags: ${{ vars.registry }}/${{ github.repository_owner }}/vault:${{ env.version_vault }}
          outputs: type=docker,dest=/tmp/vault-${{ env.version_vault }}.tar

      - uses: actions/upload-artifact@v4
        with:
          name: vault-docker
          path: /tmp/vault-${{ env.version_vault }}.tar


  docker_publish:
    env:
      version_vault: ""
    needs:
      - docker_build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: vault-docker

      - name: Extract version of docker file
        run: echo version_vault=$(ls vault-* |  grep -oE "${{ env.pattern_vault_version }}") >> $GITHUB_ENV

      - name: Docker login into ${{ vars.registry }}
        run: echo ${{ secrets.PACKAGES_TOKEN }} | docker login ${{ vars.registry }} --username ${{ github.repository_owner }} --password-stdin

      - name: Load image
        run: docker load --input vault-${{ env.version_vault }}.tar

      - name: Push image
        run: docker push ${{ vars.registry }}/${{ github.repository_owner }}/vault:${{ env.version_vault }}